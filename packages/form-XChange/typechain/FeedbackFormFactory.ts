/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FeedbackForm {
  export type QuestionStruct = { value: string; feedback: BigNumberish[] };

  export type QuestionStructOutput = [value: string, feedback: bigint[]] & {
    value: string;
    feedback: bigint[];
  };
}

export interface FeedbackFormFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createFeedbackForm"
      | "feedbackForms"
      | "getAllQuestions"
      | "getFeedbackFormById"
      | "getFeedbackForms"
      | "submitFeedback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFeedbackForm",
    values: [string[], string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feedbackForms",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllQuestions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedbackFormById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedbackForms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitFeedback",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFeedbackForm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedbackForms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedbackFormById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedbackForms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitFeedback",
    data: BytesLike
  ): Result;
}

export interface FeedbackFormFactory extends BaseContract {
  connect(runner?: ContractRunner | null): FeedbackFormFactory;
  waitForDeployment(): Promise<this>;

  interface: FeedbackFormFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFeedbackForm: TypedContractMethod<
    [_questions: string[], _title: string, _description: string],
    [string],
    "nonpayable"
  >;

  feedbackForms: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllQuestions: TypedContractMethod<
    [_id: BigNumberish],
    [FeedbackForm.QuestionStructOutput[]],
    "view"
  >;

  getFeedbackFormById: TypedContractMethod<
    [_id: BigNumberish],
    [string],
    "view"
  >;

  getFeedbackForms: TypedContractMethod<[], [string[]], "view">;

  submitFeedback: TypedContractMethod<
    [_id: BigNumberish, _feedback: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFeedbackForm"
  ): TypedContractMethod<
    [_questions: string[], _title: string, _description: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feedbackForms"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllQuestions"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [FeedbackForm.QuestionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedbackFormById"
  ): TypedContractMethod<[_id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFeedbackForms"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "submitFeedback"
  ): TypedContractMethod<
    [_id: BigNumberish, _feedback: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
