/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FeedbackForm {
  export type QuestionStruct = { value: string; feedback: BigNumberish[] };

  export type QuestionStructOutput = [value: string, feedback: bigint[]] & {
    value: string;
    feedback: bigint[];
  };
}

export interface FeedbackFormInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "description"
      | "feedbackProviders"
      | "getAllQuestions"
      | "getHasProvidedFeedback"
      | "getQuestionById"
      | "owner"
      | "questions"
      | "setQuestions"
      | "submitFeedback"
      | "title"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feedbackProviders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllQuestions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHasProvidedFeedback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "questions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuestions",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitFeedback",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedbackProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHasProvidedFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "questions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
}

export interface FeedbackForm extends BaseContract {
  connect(runner?: ContractRunner | null): FeedbackForm;
  waitForDeployment(): Promise<this>;

  interface: FeedbackFormInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  description: TypedContractMethod<[], [string], "view">;

  feedbackProviders: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getAllQuestions: TypedContractMethod<
    [],
    [FeedbackForm.QuestionStructOutput[]],
    "view"
  >;

  getHasProvidedFeedback: TypedContractMethod<
    [_address: AddressLike],
    [boolean],
    "view"
  >;

  getQuestionById: TypedContractMethod<
    [_id: BigNumberish],
    [[string, bigint[]]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  questions: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  setQuestions: TypedContractMethod<
    [_questions: string[]],
    [void],
    "nonpayable"
  >;

  submitFeedback: TypedContractMethod<
    [_feedback: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  title: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feedbackProviders"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAllQuestions"
  ): TypedContractMethod<[], [FeedbackForm.QuestionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getHasProvidedFeedback"
  ): TypedContractMethod<[_address: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getQuestionById"
  ): TypedContractMethod<[_id: BigNumberish], [[string, bigint[]]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "questions"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setQuestions"
  ): TypedContractMethod<[_questions: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitFeedback"
  ): TypedContractMethod<[_feedback: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "title"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
